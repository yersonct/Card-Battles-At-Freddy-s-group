// <auto-generated />
using System;
using Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Entity.Model.Carta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Ataque")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Defensa")
                        .HasColumnType("int");

                    b.Property<byte[]>("Imagen")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Poder")
                        .HasColumnType("int");

                    b.Property<string>("Rareza")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Terror")
                        .HasColumnType("int");

                    b.Property<int>("Velocidad")
                        .HasColumnType("int");

                    b.Property<int>("Vida")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Categoria")
                        .IsUnique();

                    b.ToTable("Cartas");
                });

            modelBuilder.Entity("Entity.Model.CartaJugador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdCarta")
                        .HasColumnType("int");

                    b.Property<int>("IdJugador")
                        .HasColumnType("int");

                    b.Property<int>("PosicionEnMazo")
                        .HasColumnType("int");

                    b.Property<int?>("RondaUsada")
                        .HasColumnType("int");

                    b.Property<bool>("Usada")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("IdCarta");

                    b.HasIndex("IdJugador", "PosicionEnMazo")
                        .IsUnique();

                    b.ToTable("CartaJugadores");
                });

            modelBuilder.Entity("Entity.Model.Jugada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaJugada")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCartaJugador")
                        .HasColumnType("int");

                    b.Property<int>("IdJugador")
                        .HasColumnType("int");

                    b.Property<int>("IdRonda")
                        .HasColumnType("int");

                    b.Property<int>("ValorAtributo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCartaJugador");

                    b.HasIndex("IdJugador");

                    b.HasIndex("IdRonda", "IdJugador")
                        .IsUnique();

                    b.ToTable("Jugadas");
                });

            modelBuilder.Entity("Entity.Model.Jugador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdPartida")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PosicionTurno")
                        .HasColumnType("int");

                    b.Property<int>("PuntosAcumulados")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPartida");

                    b.ToTable("Jugadores");
                });

            modelBuilder.Entity("Entity.Model.Partida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AtributoElegido")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Esperando");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("JugadorQueElige")
                        .HasColumnType("int");

                    b.Property<int>("MaximoRondas")
                        .HasColumnType("int");

                    b.Property<int>("NumeroJugadores")
                        .HasColumnType("int");

                    b.Property<int>("RondaActual")
                        .HasColumnType("int");

                    b.Property<int>("TurnoActual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Partidas");
                });

            modelBuilder.Entity("Entity.Model.RankingPartida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaPartida")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdJugador")
                        .HasColumnType("int");

                    b.Property<int>("IdPartida")
                        .HasColumnType("int");

                    b.Property<string>("NombreJugador")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<int>("PuntosObtenidos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdJugador");

                    b.HasIndex("IdPartida");

                    b.ToTable("RankingPartidas");
                });

            modelBuilder.Entity("Entity.Model.Ronda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AtributoCompetido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Esperando");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IdGanador")
                        .HasColumnType("int");

                    b.Property<int?>("IdJugadorQueElige")
                        .HasColumnType("int");

                    b.Property<int>("IdPartida")
                        .HasColumnType("int");

                    b.Property<int>("NumeroRonda")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGanador");

                    b.HasIndex("IdJugadorQueElige");

                    b.HasIndex("IdPartida", "NumeroRonda")
                        .IsUnique();

                    b.ToTable("Rondas");
                });

            modelBuilder.Entity("Entity.Model.CartaJugador", b =>
                {
                    b.HasOne("Entity.Model.Carta", "Carta")
                        .WithMany("CartaJugador")
                        .HasForeignKey("IdCarta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Jugador", "Jugador")
                        .WithMany("CartasJugador")
                        .HasForeignKey("IdJugador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carta");

                    b.Navigation("Jugador");
                });

            modelBuilder.Entity("Entity.Model.Jugada", b =>
                {
                    b.HasOne("Entity.Model.CartaJugador", "CartaJugador")
                        .WithMany("Jugadas")
                        .HasForeignKey("IdCartaJugador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Jugador", "Jugador")
                        .WithMany("Jugadas")
                        .HasForeignKey("IdJugador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Ronda", "Ronda")
                        .WithMany("Jugadas")
                        .HasForeignKey("IdRonda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartaJugador");

                    b.Navigation("Jugador");

                    b.Navigation("Ronda");
                });

            modelBuilder.Entity("Entity.Model.Jugador", b =>
                {
                    b.HasOne("Entity.Model.Partida", "Partida")
                        .WithMany("Jugadores")
                        .HasForeignKey("IdPartida")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("Entity.Model.Ronda", b =>
                {
                    b.HasOne("Entity.Model.Jugador", "Ganador")
                        .WithMany("RondasGanadas")
                        .HasForeignKey("IdGanador")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entity.Model.Jugador", "JugadorQueElige")
                        .WithMany("RondasQueElige")
                        .HasForeignKey("IdJugadorQueElige")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entity.Model.Partida", "Partida")
                        .WithMany("Rondas")
                        .HasForeignKey("IdPartida")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ganador");

                    b.Navigation("JugadorQueElige");

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("Entity.Model.Carta", b =>
                {
                    b.Navigation("CartaJugador");
                });

            modelBuilder.Entity("Entity.Model.CartaJugador", b =>
                {
                    b.Navigation("Jugadas");
                });

            modelBuilder.Entity("Entity.Model.Jugador", b =>
                {
                    b.Navigation("CartasJugador");

                    b.Navigation("Jugadas");

                    b.Navigation("RondasGanadas");

                    b.Navigation("RondasQueElige");
                });

            modelBuilder.Entity("Entity.Model.Partida", b =>
                {
                    b.Navigation("Jugadores");

                    b.Navigation("Rondas");
                });

            modelBuilder.Entity("Entity.Model.Ronda", b =>
                {
                    b.Navigation("Jugadas");
                });
#pragma warning restore 612, 618
        }
    }
}
